{"version":3,"sources":["../node_modules/geotiff/dist-module/compression/lzw.js"],"names":["_basedecoder","_interopRequireDefault","require","obj","__esModule","default","_typeof","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","call","Number","_inherits","subClass","superClass","create","value","_setPrototypeOf","o","p","setPrototypeOf","bind","__proto__","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf","result","NewTarget","Reflect","construct","arguments","apply","_possibleConstructorReturn","self","_assertThisInitialized","ReferenceError","sham","Proxy","Boolean","valueOf","e","getPrototypeOf","MIN_BITS","CLEAR_CODE","EOI_CODE","MAX_BYTELENGTH","getByte","array","position","d","a","Math","floor","de","ef","fg","dg","max","console","warn","chunk1","pow","chunks","chunk2","hi","chunk3","appendReversed","dest","source","push","decompress","dictionaryIndex","Uint16Array","dictionaryChar","Uint8Array","dictionaryLength","byteLength","initDictionary","getNext","byte","addToDictionary","c","getDictionaryReversed","n","rev","code","oldCode","Error","concat","val","oldVal","LZWDecoder","_BaseDecoder","_super","decodeBlock","buffer","BaseDecoder","exports"],"mappings":"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","file":"lzw.f3249c00.js","sourceRoot":"..\\templates","sourcesContent":["import BaseDecoder from './basedecoder.js';\n\nconst MIN_BITS = 9;\nconst CLEAR_CODE = 256; // clear code\nconst EOI_CODE = 257; // end of information\nconst MAX_BYTELENGTH = 12;\n\nfunction getByte(array, position, length) {\n  const d = position % 8;\n  const a = Math.floor(position / 8);\n  const de = 8 - d;\n  const ef = (position + length) - ((a + 1) * 8);\n  let fg = (8 * (a + 2)) - (position + length);\n  const dg = ((a + 2) * 8) - position;\n  fg = Math.max(0, fg);\n  if (a >= array.length) {\n    console.warn('ran off the end of the buffer before finding EOI_CODE (end on input code)');\n    return EOI_CODE;\n  }\n  let chunk1 = array[a] & ((2 ** (8 - d)) - 1);\n  chunk1 <<= (length - de);\n  let chunks = chunk1;\n  if (a + 1 < array.length) {\n    let chunk2 = array[a + 1] >>> fg;\n    chunk2 <<= Math.max(0, (length - dg));\n    chunks += chunk2;\n  }\n  if (ef > 8 && a + 2 < array.length) {\n    const hi = ((a + 3) * 8) - (position + length);\n    const chunk3 = array[a + 2] >>> hi;\n    chunks += chunk3;\n  }\n  return chunks;\n}\n\nfunction appendReversed(dest, source) {\n  for (let i = source.length - 1; i >= 0; i--) {\n    dest.push(source[i]);\n  }\n  return dest;\n}\n\nfunction decompress(input) {\n  const dictionaryIndex = new Uint16Array(4093);\n  const dictionaryChar = new Uint8Array(4093);\n  for (let i = 0; i <= 257; i++) {\n    dictionaryIndex[i] = 4096;\n    dictionaryChar[i] = i;\n  }\n  let dictionaryLength = 258;\n  let byteLength = MIN_BITS;\n  let position = 0;\n\n  function initDictionary() {\n    dictionaryLength = 258;\n    byteLength = MIN_BITS;\n  }\n  function getNext(array) {\n    const byte = getByte(array, position, byteLength);\n    position += byteLength;\n    return byte;\n  }\n  function addToDictionary(i, c) {\n    dictionaryChar[dictionaryLength] = c;\n    dictionaryIndex[dictionaryLength] = i;\n    dictionaryLength++;\n    return dictionaryLength - 1;\n  }\n  function getDictionaryReversed(n) {\n    const rev = [];\n    for (let i = n; i !== 4096; i = dictionaryIndex[i]) {\n      rev.push(dictionaryChar[i]);\n    }\n    return rev;\n  }\n\n  const result = [];\n  initDictionary();\n  const array = new Uint8Array(input);\n  let code = getNext(array);\n  let oldCode;\n  while (code !== EOI_CODE) {\n    if (code === CLEAR_CODE) {\n      initDictionary();\n      code = getNext(array);\n      while (code === CLEAR_CODE) {\n        code = getNext(array);\n      }\n\n      if (code === EOI_CODE) {\n        break;\n      } else if (code > CLEAR_CODE) {\n        throw new Error(`corrupted code at scanline ${code}`);\n      } else {\n        const val = getDictionaryReversed(code);\n        appendReversed(result, val);\n        oldCode = code;\n      }\n    } else if (code < dictionaryLength) {\n      const val = getDictionaryReversed(code);\n      appendReversed(result, val);\n      addToDictionary(oldCode, val[val.length - 1]);\n      oldCode = code;\n    } else {\n      const oldVal = getDictionaryReversed(oldCode);\n      if (!oldVal) {\n        throw new Error(`Bogus entry. Not in dictionary, ${oldCode} / ${dictionaryLength}, position: ${position}`);\n      }\n      appendReversed(result, oldVal);\n      result.push(oldVal[oldVal.length - 1]);\n      addToDictionary(oldCode, oldVal[oldVal.length - 1]);\n      oldCode = code;\n    }\n\n    if (dictionaryLength + 1 >= (2 ** byteLength)) {\n      if (byteLength === MAX_BYTELENGTH) {\n        oldCode = undefined;\n      } else {\n        byteLength++;\n      }\n    }\n    code = getNext(array);\n  }\n  return new Uint8Array(result);\n}\n\nexport default class LZWDecoder extends BaseDecoder {\n  decodeBlock(buffer) {\n    return decompress(buffer, false).buffer;\n  }\n}\n"]}